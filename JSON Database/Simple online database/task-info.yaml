type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    public interface Database {

        String get(int index);
        String set(int index, String data);
        String  delete(int index);


    }
  learner_created: true
- name: src/server/Utils.java
  visible: true
  text: |
    package server;

    public class Utils {
        public static Command defineCommand(String input) {
            String[] split = input.split("\\s");
            StringBuilder arguments = buildArguments(split);
            if (split[0].equals("get")) {
                return new GetCommand(Integer.parseInt(split[1]));
            }
            if (split[0].equals("set")) {
                return new SetCommand(Integer.parseInt(split[1]), arguments.toString());

            }

            if (split[0].equals("delete")) {
                return new DeleteCommand(Integer.parseInt(split[1]));
            }
            if (split[0].equals("exit")) {
                return new ExitCommand();
            }

            else {
                return null;
            }
        }

        private static StringBuilder buildArguments(String[] split) {
            StringBuilder arguments = new StringBuilder();
            for (int i = 2; i < split.length; i++) {
                arguments.append(split[i] + " ");
            }
            return arguments;
        }
    }
  learner_created: true
- name: src/server/DeleteCommand.java
  visible: true
  text: |+
    package server;

    public class DeleteCommand implements Command {

        int index;

        public DeleteCommand(int argument) {
            this.index = argument;
        }

        @Override
        public String execute() {
            return JsonDataBase.getInstance().delete(index);

        }
    }


  learner_created: true
- name: src/server/InputReader.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class InputReader {
        static Scanner sc = new Scanner(System.in);

        public static String readInput(){
            return sc.nextLine();
        }
        public static void closeScanner(){
            sc.close();
        }
    }
  learner_created: true
- name: src/server/JsonServer.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class JsonServer {
        private static final String address = "127.0.0.1";
        private static final int PORT = 65000;
        private static boolean isStopped = false;

        public static void main(String[] args) throws IOException {
            ServerSocket ServerSocket = new ServerSocket(PORT, 50, InetAddress.getByName(address));
            System.out.println("Server started!");


            while (!isStopped) {

                try (
                        Socket socket = ServerSocket.accept();
                        DataInputStream input = new DataInputStream(socket.getInputStream());
                        DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                )
                {
                    String inputMsg = input.readUTF();
                    if (inputMsg.contains("exit")) {
                        isStopped = true;
                    }
                    System.out.print("Received: " + inputMsg + "\n");
                    Controller controller = new Controller();
                    Command command = Utils.defineCommand(inputMsg);
                    controller.setCommand(command);
                    String outputMsg = controller.executeCommand();
                    output.writeUTF(outputMsg);
                    System.out.print("Sent: " + outputMsg + "\n");

                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

        }
    }
  learner_created: true
- name: src/server/UI.java
  visible: true
  text: |+
    package server;

    public class UI {

        public static void showMenu() {

            Controller controller = new Controller();
            while (true) {
                Command command = Utils.defineCommand(InputReader.readInput());
                controller.setCommand(command);
                controller.executeCommand();
                InputReader.closeScanner();
            }
        }
    }

  learner_created: true
- name: src/server/SetCommand.java
  visible: true
  text: |
    package server;

    public class SetCommand implements Command {
        private int intArg;
        private String strArg;

        public SetCommand(int intArg, String strArg) {
            this.intArg = intArg;
            this.strArg = strArg;
        }

        @Override
        public String execute() {
           return JsonDataBase.getInstance().set(intArg,strArg);

        }
    }
  learner_created: true
- name: src/client/JsonClient.java
  visible: true
  text: |
    package client;

    import com.beust.jcommander.JCommander;
    import com.beust.jcommander.Parameter;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;

    public class JsonClient {
        private static Socket socket;
        @Parameter(names = {"-t"}, description = "Type of command: exit, get,set,delete")
        String command;
        @Parameter(names = {"-i"}, description = "index of record")
        int index;
        @Parameter(names = {"-m"}, description = "sending message(only for \"set\" command")
        String data;


        public static void main(String[] args) throws IOException {
            createSocket();

            try (DataInputStream input = new DataInputStream(socket.getInputStream());
                 DataOutputStream output = new DataOutputStream(socket.getOutputStream())
            ) {
                greetingMsg();
                JsonClient client = new JsonClient();
                JCommander.newBuilder()
                        .addObject(client)
                        .build()
                        .parse(args);

                String tempMsg = String.format("%s %s %s", client.command, client.index, client.data);
                String outputMsg = tempMsg.replace("null", "").replace("0", "").strip();
                output.writeUTF(outputMsg);
                System.out.print("Sent: " + outputMsg + "\n");

                String inputMsg = input.readUTF();
                System.out.print("Received: " + inputMsg + "\n");

            } catch (IOException e) {
                e.printStackTrace();
            }


        }

        private static void greetingMsg() {
            System.out.println("Client started!");
        }

        private static void createSocket() throws IOException {
            final String ADDRESS = "127.0.0.1";
            final int PORT = 65000;
            try {
                socket = new Socket(InetAddress.getByName(ADDRESS), PORT);
                return;
            } catch (Exception e) {
                System.out.println("\n" + e + "\n[CLIENT] Can't connect to the server");
            }


        }
    }
  learner_created: true
- name: src/server/Controller.java
  visible: true
  text: |
    package server;

    public class Controller {
        private Command command;


        public void setCommand(Command command) {
            this.command = command;
        }

        public String executeCommand() {
           return command.execute();

        }

    }
  learner_created: true
- name: src/server/ExitCommand.java
  visible: true
  text: |
    package server;

    public class ExitCommand implements Command{
        @Override
        public String execute() {
           return "OK";
        }
    }
  learner_created: true
- name: src/server/Command.java
  visible: true
  text: |
    package server;

    public interface Command {
       String execute();
    }
  learner_created: true
- name: src/server/JsonDataBase.java
  visible: true
  text: |
    package server;

    public class JsonDataBase implements Database {
        private static JsonDataBase jsonDataBase;
        String[] db;


        private JsonDataBase() {
            this.db = new String[1000];
        }

        public static JsonDataBase getInstance() {
            if (jsonDataBase == null) {
                jsonDataBase = new JsonDataBase();
            }
            return jsonDataBase;
        }


        public static void printDb(String[] db) {
            System.out.println();
            System.out.println("Database print started...");
            for (String cur:db
                 ) {
                System.out.print(cur+ " ");
            }
            System.out.println("Database printed");
        }
        @Override
        public String get(int index) {
            if (index <= 0 || index > db.length) {
                System.out.println("ERROR");

                return "ERROR";

            }
            if (db[index - 1] == null
                    || db[index - 1].isEmpty()
                    || db[index - 1].isBlank()) {
                System.out.println("ERROR");

                return "ERROR";
            }
            System.out.println(db[index - 1]);
            return db[index - 1];
        }

        @Override
        public String set(int index, String data) {
            if (index <= 0 || index > db.length) {
             return   "ERROR";

            }

            else {
                db[index-1] = data;

               return "OK";

            }

        }

        @Override
        public String delete(int index) {
            if (index <= 0 || index > db.length) {

                return "ERROR";

            }
            if (db[index - 1] == null
                    || db[index - 1].isEmpty()
                    || db[index - 1].isBlank()) {
                db[index-1] = "";

                return "OK";

            }

            db[index-1] = "";

            return "OK";


        }
    }
  learner_created: true
- name: src/server/GetCommand.java
  visible: true
  text: |
    package server;

    public class GetCommand implements Command {

        int argument;

        @Override
        public String execute() {
            return JsonDataBase.getInstance().get(argument);
        }

        public GetCommand(int argument) {
            this.argument = argument;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 10 Jun 2022 09:17:03 UTC
record: 3
